---
# defaults file for hostapd

# Simple placeholder to allow other roles to detect this role
hostapd__role: True

# Enable facts deploiement
hostapd__facts: True

# Choose the monitoring backend to configure (if available)
#hostapd__monitoring:

# List of required packages
hostapd__packages:
  - hostapd

# Dict of hostapd instances
hostapd__instances: {}


### SERVICE CONFIGURATION
# The name of the service to use
hostapd__service_name: 'hostapd{% if hostapd__service_configure_systemd|bool %}@%i{% endif %}'
hostapd__service_enabled: True

# Path to hostapd binary executable
hostapd__executable: /usr/sbin/hostapd
# Path to hostapd pidfile
hostapd__service_pidfile: '/run/hostapd{% if hostapd__service_configure_systemd|bool %}.%i{% endif %}.pid'

# Set to yes to deploy and override systemd service configuration
hostapd__service_configure_systemd: False

# The path to the configuration file
hostapd__config_file: /etc/hostapd/hostapd.%i.conf

# Path to MAC address restrictions files
hostapd__accept_mac_file: /etc/hostapd/hostapd.%i.accept
hostapd__deny_mac_file: /etc/hostapd/hostapd.%i.deny


### General configuration
# default group for control sockets
hostapd__ctrl_interface_group: root

# Define default values for all instances
hostapd__instance_defaults:
  # The network interface to use
  # AP netdevice name (without 'ap' postfix, i.e., wlan0 uses wlan0ap for
  # management frames); ath0 for madwifi
  #interface:

  # Driver interface type (hostap/wired/madwifi/test/none/nl80211/bsd);
  # nl80211 is used with all Linux mac80211 drivers.
  # Use driver=none if building hostapd as a standalone RADIUS server that does
  # not control any wireless/wired driver.
  driver: hostap

  # Interface for separate control program. If this is specified, hostapd
  # will create this directory and a UNIX domain socket for listening to requests
  # from external programs (CLI/GUI, etc.) for status information and
  # configuration.
  ctrl_interface: /var/run/hostapd.%i

  # Access control for the control interface can be configured by setting the
  # directory to allow only members of a group to use sockets. This way, it is
  # possible to run hostapd as root (since it needs to change network
  # configuration and open raw sockets) and still allow GUI/CLI components to be
  # run as non-root users.
  # This variable can be a group name or gid.
  ctrl_interface_group: '{{ hostapd__ctrl_interface_group }}'

  # hostapd event logger configuration
  #
  # Two output method: syslog and stdout (only usable if not forking to
  # background).
  #
  # Module bitfield (ORed bitfield of modules that will be logged; -1 = all
  # modules):
  # bit 0 (1) = IEEE 802.11
  # bit 1 (2) = IEEE 802.1X
  # bit 2 (4) = RADIUS
  # bit 3 (8) = WPA
  # bit 4 (16) = driver interface
  # bit 5 (32) = IAPP
  # bit 6 (64) = MLME
  #
  # Levels (minimum value for logged events):
  #  0 = verbose debugging
  #  1 = debugging
  #  2 = informational messages
  #  3 = notification
  #  4 = warning
  logger_syslog: -1
  logger_syslog_level: 2
  logger_stdout: -1
  logger_stdout_level: 2


  ### IEEE 802.11 related configuration
  # The SSID of the Wifi network
  #ssid:

  # UTF-8 SSID: Whether the SSID is to be interpreted using UTF-8 encoding
  utf8_ssid: False

  # Select country code (ISO/IEC 3166-1) for frequencies limitations
  country_code: FR

  # Enable IEEE 802.11d. This advertises the country_code and the set of allowed
  # channels and transmit power levels based on the regulatory limits. The
  # country_code setting must be configured with the correct country for
  # IEEE 802.11d functions.
  ieee80211d: False

  # Enable IEEE 802.11h. This enables radar detection and DFS support if
  # available. DFS support is required on outdoor 5 GHz channels in most countries
  # of the world. This can be used only with ieee80211d=1.
  # Dynamic frequency selection on 5GHz bands
  ieee80211h: False

  # Enable 450Mbit enhancements for 2.4GHz and 5GHz IEEE 802.11n (HT)
  # Note: You will also need to enable WMM for full HT functionality.
  ieee80211n: False

  # Operation mode a = IEEE 802.11a, b = IEEE 802.11b, g = IEEE 802.11g, ad = IEEE 802.11ad
  # a => 54M on 5GHz
  # b => 11M on 2.4GHz
  # g => 54M on 2.4GHz
  # ad => 6,75G on 60GHz
  hw_mode: g

  # Select the channel number (IEEE 802.11) or acs_survey for automatic selection
  # ACS tuning - Automatic Channel Selection
  # See: http://wireless.kernel.org/en/users/Documentation/acs
  channel: acs_survey

  # Number of channels scan
  acs_num_scans: 5

  # Channel list restriction. This option allows hostapd to select one of the
  # provided channels when a channel should be automatically selected. This
  # is currently only used for DFS when the current channels becomes unavailable
  # due to radar interference, and is currently only useful when ieee80211h=1 is
  # set.
  # Default: not set (allow any enabled channel to be selected)
  chanlist: []

  # Beacon interval in Kius (1.024 ms) (default: 100; range 15..65535)
  beacon_int: 100

  # DTIM (delivery traffic information message) period (range 1..255):
  # number of beacons between DTIMs (1 = every beacon includes DTIM element)
  dtim_period: 2

  # Maximum number of stations allowed in station table. New stations will be
  # rejected after the station table is full. IEEE 802.11 has a limit of 2007
  # different association IDs, so this number should not be larger than that.
  max_num_sta: 2007

  # Station MAC address -based authentication
  # Please note that this kind of access control requires a driver that uses
  # hostapd to take care of management frame processing and as such, this can be
  # used with driver=hostap or driver=nl80211, but not with driver=madwifi.
  # 0 = accept unless in deny list
  # 1 = deny unless in accept list
  # 2 = use external RADIUS server (accept/deny lists are searched first)
  macaddr_acl: 0

  # List of accepted mac addresses
  accept_mac: []

  # List of denied mac addresses
  deny_mac: []

  # IEEE 802.11 specifies two authentication algorithms. hostapd can be
  # configured to allow both of these or only one. Open system authentication
  # should be used with IEEE 802.1X.
  # Bit fields of allowed authentication algorithms:
  # bit 0 = Open System Authentication
  # bit 1 = Shared Key Authentication (requires WEP)
  auth_algs: 1

  # Send empty SSID in beacons and ignore probe request frames that do not
  # specify full SSID, i.e., require stations to know SSID.
  # 1 = send empty (length=0) SSID in beacon and ignore probe request for
  #     broadcast SSID
  # 2 = clear SSID (ASCII 0), but keep the original length (this may be required
  #     with some clients that do not support empty SSID) and ignore probe
  #     requests for broadcast SSID
  ignore_broadcast_ssid: 0


  ##### IEEE 802.11ac
  # ieee80211ac: Whether IEEE 802.11ac (VHT) is enabled
  # Note: You will also need to enable WMM for full VHT functionality.
  ieee80211ac: False


  ##### IEEE 802.1X-2004
  # Require IEEE 802.1X authorization
  ieee8021x: False


  ##### WPA/IEEE 802.11i
  # Enable WPA. Setting this variable configures the AP to require WPA (either
  # WPA-PSK or WPA-RADIUS/EAP based on other configuration).
  # For WPA-PSK, either wpa_psk or wpa_passphrase must be set and wpa_key_mgmt must include WPA-PSK.
  # Instead of wpa_psk / wpa_passphrase, wpa_psk_radius might suffice.
  # For WPA-RADIUS/EAP, ieee8021x must be set (but without dynamic WEP keys),
  # RADIUS authentication server must be configured, and WPA-EAP must be included
  # in wpa_key_mgmt.
  # This field is a bit field that can be used to enable WPA (IEEE 802.11i/D3.0)
  # and/or WPA2 (full IEEE 802.11i/RSN):
  # bit0 = WPA
  # bit1 = IEEE 802.11i/RSN (WPA2) (dot11RSNAEnabled)
  #wpa: 2

  # WPA pre-shared keys for WPA-PSK. This can be either entered as a 256-bit
  # secret in hex format (64 hex digits), wpa_psk, or as an ASCII passphrase
  # (8..63 characters) that will be converted to PSK. This conversion uses SSID
  # so the PSK changes when ASCII passphrase is used and the SSID is changed.
  #wpa_psk:
  #wpa_passphrase:

  # Set of accepted key management algorithms (WPA-PSK, WPA-EAP, or both). The
  # entries are separated with a space. WPA-PSK-SHA256 and WPA-EAP-SHA256 can be
  # added to enable SHA256-based stronger algorithms.
  # (dot11RSNAConfigAuthenticationSuitesTable)
  wpa_key_mgmt: ['WPA-PSK', 'WPA-EAP']

  # Set of accepted cipher suites (encryption algorithms) for pairwise keys
  # (unicast packets). This is a space separated list of algorithms:
  # CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
  # TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
  # Group cipher suite (encryption algorithm for broadcast and multicast frames)
  # is automatically selected based on this configuration. If only CCMP is
  # allowed as the pairwise cipher, group cipher will also be CCMP. Otherwise,
  # TKIP will be used as the group cipher.
  # Pairwise cipher for WPA (v1) (default: TKIP)
  wpa_pairwise: TKIP

  # Pairwise cipher for RSN/WPA2 (default: use wpa_pairwise value)
  #rsn_pairwise:
